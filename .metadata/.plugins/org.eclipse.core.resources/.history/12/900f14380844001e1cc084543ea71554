package security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;

import filter.AuthTokenFilter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfiguration {

	@Autowired
    private AuthTokenFilter authTokenFilter;


    @Override
    protected void configure(HttpSecurity http) throws Exception {

        // Enable CORS and disable CSRF
        http = http.cors().and().csrf().disable();

        // Set session management to stateless
        http = http
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and();


        // Set unauthorized requests exception handler
        http = http
                .exceptionHandling()
                .authenticationEntryPoint((request, response, ex) -> setInvalidTokenResponse(response))
                .and();

        // Set permissions on endpoints
        http.authorizeRequests()
                .antMatchers( Arrays.stream(AuthExclusions.values()).map(e -> e.url)
                        .toArray(String[]::new)).permitAll().anyRequest().authenticated();

        http.addFilterBefore(this.authTokenFilter, UsernamePasswordAuthenticationFilter.class);
    }

}
